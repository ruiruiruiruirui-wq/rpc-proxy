    location /tbtc/ {
        access_log /etc/nginx/logs/tbtc-access.log rpc-proxy;
        error_log /etc/nginx/logs/tbtc-error.log error;

        content_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            

            local api_key = os.getenv("BTCBOOK_TESTNET_NOWNODES_IO_KEY")
            if not api_key then
                ngx.log(ngx.ERR, "BTCBOOK_TESTNET_NOWNODES_IO_KEY environment variable not set")
                ngx.status = 500
                ngx.say('{"error": "API key not configured"}')
                return
            end
            
            local request_uri = ngx.var.request_uri
            local path = string.gsub(request_uri, "^/tbtc", "")
            local upstream_url = "https://btcbook-testnet.nownodes.io/" .. api_key .. path
            
            ngx.log(ngx.INFO, "Proxying to: ", upstream_url)
            
            local httpc = http.new()
            httpc:set_timeout(30000)
            
            local headers = {}
            local req_headers = ngx.req.get_headers()
            for k, v in pairs(req_headers) do
                if k ~= "host" and k ~= "connection" then
                    headers[k] = v
                end
            end
            headers["Host"] = "btcbook-testnet.nownodes.io"
            headers["accept-encoding"] = "identity"
            
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            
            local res, err = httpc:request_uri(upstream_url, {
                method = ngx.var.request_method,
                body = body,
                headers = headers,
                ssl_verify = false,
                keepalive_timeout = 60000,
                keepalive_pool = 10
            })
            
            if not res then
                ngx.log(ngx.ERR, "failed to request upstream: ", err)
                ngx.status = 502
                ngx.say('{"error": "upstream request failed"}')
                return
            end
            
            ngx.status = res.status
            for k, v in pairs(res.headers) do
                if k ~= "connection" and k ~= "transfer-encoding" then
                    ngx.header[k] = v
                end
            end
            
            ngx.say(res.body)
        }
    }
