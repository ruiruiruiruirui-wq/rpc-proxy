# Please copy to nginx's conf.d directory
# Set Prometheus global dict
lua_shared_dict prometheus_metrics 10M; #init 10M memory
lua_shared_dict uri_by_host 10M;
lua_shared_dict global_set 1M;
# Development option, if deploy production, pls cache on!
lua_code_cache on;

init_by_lua_block {
    local success, prometheus_instance = pcall(function()
        return require("rpc-proxy.prometheus").init("prometheus_metrics")
    end)
    
    if success then
        prometheus = prometheus_instance
        ngx.log(ngx.INFO, "Prometheus initialized successfully")
    else
        ngx.log(ngx.ERR, "Failed to initialize Prometheus: ", prometheus_instance)
        prometheus = nil
    end
    
    local success2, counter_module = pcall(function()
        return require 'counter'
    end)
    
    if success2 then
        counter = counter_module
        if prometheus then
            counter.init()
        else
            ngx.log(ngx.ERR, "Skipping counter.init() because Prometheus is not available")
        end
    else
        ngx.log(ngx.ERR, "Failed to load counter module: ", counter_module)
    end
}

# Expose prometheus's metrics scrape port
server {
    listen 9145;
    allow all;
    deny all;
    access_log off;
    location /metrics {
        content_by_lua_block {
            if prometheus then
                local success, result = pcall(function()
                    return prometheus:collect()
                end)
                if success then
                    ngx.say(result)
                else
                    ngx.log(ngx.ERR, "Failed to collect Prometheus metrics: ", result)
                    ngx.status = 500
                    ngx.say("Internal Server Error")
                end
            else
                ngx.log(ngx.ERR, "Prometheus not available")
                ngx.status = 500
                ngx.say("Prometheus not available")
            end
        }
    }
}
