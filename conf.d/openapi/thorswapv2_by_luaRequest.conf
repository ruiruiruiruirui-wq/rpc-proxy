location /thorswapv2/ {
    access_log /etc/nginx/logs/thorswapv2-access.log rpc-proxy;
    error_log /etc/nginx/logs/thorswapv2-error.log;

    content_by_lua_block {
        local http = require "resty.http"
        local httpc = http.new()

        ngx.req.read_body()
        local body_data = ngx.req.get_body_data()

        -- 定位 '/thorswapv2/' 并从其后开始截取 URI
        local base_path = "/thorswapv2/"
        local start_pos = ngx.var.request_uri:find(base_path)
        if not start_pos then
            ngx.log(ngx.ERR, "URI does not contain '/thorswapv2/'")
            return ngx.exit(500)
        end
        -- 确保在 api.swapkit.dev 后面添加 '/'
        local target_uri = "https://api.swapkit.dev/" .. ngx.var.request_uri:sub(start_pos + #base_path)

        local api_keys = ngx.shared.api_keys
        local token = api_keys:get("THORSWAP_API_KEY")

        if not token then
            ngx.log(ngx.ERR, "API_KEY not found in shared memory")
            return ngx.exit(500)
        end

        -- 发送请求到目标服务器
        local res, err = httpc:request_uri(target_uri, {
            method = ngx.var.request_method,  -- 使用与客户端相同的请求方法
            body = body_data,
            headers = {
                ["Host"] = "api.swapkit.dev",
                ["x-api-key"] = token,
                ["Content-Type"] = ngx.var.content_type
            },
            ssl_verify = false  -- 在生产环境中应启用SSL验证
        })

        if not res then
            ngx.log(ngx.ERR, "request failed: ", err)
            return ngx.exit(500)
        end

        -- 将目标服务器的响应头发送给客户端
        for k, v in pairs(res.headers) do
            ngx.header[k] = v
        end

        -- 设置响应状态码
        ngx.status = res.status

        -- 发送响应体到客户端
        ngx.say(res.body)
        ngx.exit(ngx.HTTP_OK)
    }
}

