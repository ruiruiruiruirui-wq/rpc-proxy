        location /goplus-token/update {
            access_log /etc/nginx/logs/goplus-token-update-access.log rpc-proxy;
            error_log /etc/nginx/logs/goplus-token-update-error.log error;

            content_by_lua_block {
                local sign_generator = require "rpc-proxy.goplus-sign"
                sign_generator.update_token_http()
            }
        }
        
        location /goplus-token {
            access_log /etc/nginx/logs/goplus-token-access.log rpc-proxy;
            error_log /etc/nginx/logs/goplus-token-error.log error;

            content_by_lua_block {
                local sign_generator = require "rpc-proxy.goplus-sign"
                local token, err = sign_generator.get_token()
                if not token then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("Failed to get token: ", err)
                    return
                end
                ngx.say("Token: ", token)
            }
        }

location /goplus/ {
    access_log /etc/nginx/logs/goplus-access.log rpc-proxy;
    error_log /etc/nginx/logs/goplus-error.log error;

    content_by_lua_block {
        local http = require "resty.http"
        local httpc = http.new()
        httpc:set_timeout(50000)

        local sign_generator = require "rpc-proxy.goplus-sign"
        local token, err = sign_generator.get_token()
        
        if not token then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("Failed to get token: ", err)
            return
        end

        local path = ngx.var.uri
        local prefix = "/goplus/"
        local index = path:find(prefix, 1, true)
        local subpath = ""

        if index then
            subpath = path:sub(index + #prefix)
        end

        local target_uri = "https://api.gopluslabs.io"
        if subpath ~= "" then
            target_uri = target_uri .. "/" .. subpath
        end

        local query = ngx.var.args
        if query then
            target_uri = target_uri .. "?" .. query
        end

        ngx.req.read_body()
        local body_data = ngx.req.get_body_data()

        local res, err = httpc:request_uri(target_uri, {
            method = ngx.var.request_method,
            body = body_data,
            headers = {
                ["Host"] = "api.gopluslabs.io",
                ["Authorization"] = token,
                ["Content-Type"] = ngx.var.content_type,
                ["X-Forwarded-For"] = ngx.var.remote_addr
            },
            ssl_verify = false
        })

        if not res then
            ngx.log(ngx.ERR, "Request to backend api.gopluslabs.io failed: ", err)
            return ngx.exit(500)
        end

        for k, v in pairs(res.headers) do
            ngx.header[k] = v
        end
        ngx.status = res.status
        ngx.say(res.body)
        ngx.exit(ngx.HTTP_OK)
    }

    proxy_set_header accept-encoding "identity";
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_ssl_server_name on;
    proxy_redirect off;
}
